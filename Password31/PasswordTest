import React, { useContext, useState } from "react";
import { useForm } from "react-hook-form";

import Button from "../../../../../button/Button";
import StandardLayout from "../../../../../standardlayout/StandardLayout";
import AuthContext from "../../../../../../state-management/contexts/authContext";
import { useChangePassword } from "../../../../../../hooks/useChangePassword";

import styles from "./Security.module.css";
import FormStyles from "./../../../../../FormFields.module.css";

import ErrorMessage from "../../../../../errormessage/ErrorMessage";
import axios from "axios";
import {
  ModalType,
  useModal,
} from "../../../../../../state-management/contexts/modalContext";
import PasswordField from "../../../../../PasswordField";
import PasswordStrengthBar from "../../../../../PasswordStrengthBar";
import Loader from "../../../../../modals/loadingModal/Loader";
import Tooltip from "../../../../../tooltip/Tooltip";
import FormLabel from "../../../../../label/FormLabel";

export interface SecurityFormValues {
  username: string;
  currentPassword: string;
  newPassword: string;
  confirmPassword: string;
}
const PasswordTest: React.FC = () => {
  const { openModal, closeModal } = useModal();

  const {
    register,
    handleSubmit,
    watch,
    reset,
    formState: { errors, isValid, isDirty, isSubmitting },
  } = useForm<SecurityFormValues>({ mode: "onChange" });

  const currentPassword = watch("currentPassword");
  const newPassword = watch("newPassword");
  const confirmPassword = watch("confirmPassword");

  const passwordsMatch = confirmPassword === newPassword;

  const authContext = useContext(AuthContext);
  const { authState, dispatch } = authContext;

  const { mutateAsync: changePassword, isLoading, error } = useChangePassword();

  const [submissionError, setSubmissionError] = useState<string | null>(null);

  const onSubmit = (data: SecurityFormValues) => {
    setSubmissionError(null);
    try {
      changePassword(
        {
          websiteSubscriberId: "53694", // Temp should be authState.subscriberId
          currentPassword: currentPassword,
          newPassword: newPassword,
          confirmPassword: confirmPassword,
        },
        {
          onSuccess: () => {
            reset();
            closeModal();
            openModal(
              ModalType.SUCCESS,
              null,
              "Your password was updated successfully! You will now be redirected to log in again."
            );
            dispatch({ type: "LOGOUT" });
          },
          onError: (error) => {
            const errorMessage =
              axios.isAxiosError(error) && error.response?.data.detailMessage
                ? error.response.data.detailMessage
                : "Failed to update password. Please try again.";
            setSubmissionError(errorMessage);
          },
        }
      );
    } catch (error) {
      setSubmissionError("Failed to update password. Please try again.");
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <StandardLayout
        header="Password"
        footer={
          <div className={styles.footer}>
            <Button
              variant="secondary"
              type="submit"
              disabled={
                !isValid || isLoading || isSubmitting || !passwordsMatch
              }
            >
              {isLoading || isSubmitting ? "Updating..." : "Update Password"}
            </Button>
          </div>
        }
      >
        {isLoading && isSubmitting && <Loader />}
        <div className={styles.passwordContainer}>
          {/* Error Message */}
          {submissionError && (
            <ErrorMessage errorMessage={submissionError} showPrefix />
          )}
          {/* If there's a direct error from the hook (might be the same as submissionError) */}
          {error && !submissionError && (
            <ErrorMessage errorMessage={error.message} showPrefix />
          )}
          <input
            type="hidden"
            {...register("username", {
              required: "Username is required.",
            })}
            defaultValue={authState.username}
            autoComplete="username"
            tabIndex={-1}
          />

          <FormLabel
            htmlFor="currentPassword"
            label="Current Password"
            aria-describedby="Current Password Label"
          />
          <PasswordField
            label="Current Password"
            error={errors.currentPassword?.message}
            {...register("currentPassword", {
              required: "Current Password is required.",
            })}
            autoComplete="current-password"
          />
          <div className={FormStyles.labelWithTooltip}>
            <FormLabel
              htmlFor="newPassword"
              label="New Password"
              aria-describedby="New Password Label"
            />
            <Tooltip icon={<span>?</span>}>
              <ul>
                <li>At least 8 characters</li>
                <li>At least one uppercase letter</li>
                <li>At least one number</li>
                <li>At least one special character</li>
              </ul>
            </Tooltip>
          </div>
          <PasswordField
            label="New Password"
            error={errors.newPassword?.message}
            {...register("newPassword", {
              required: "New Password is required.",
              minLength: {
                value: 8,
                message: "Password must be at least 8 characters long.",
              },
              validate: {
                hasUpperCase: (value) =>
                  /[A-Z]/.test(value) ||
                  "Password must contain at least one uppercase letter.",
                hasNumber: (value) =>
                  /\d/.test(value) ||
                  "Password must contain at least one number.",
                hasSpecialChar: (value) =>
                  /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/.test(value) ||
                  "Password must contain at least one special character.",
              },
            })}
            autoComplete="new-password"
          />
          <PasswordStrengthBar password={newPassword} />

          <FormLabel
            htmlFor="confirmPassword"
            label="Confirm New Password"
            aria-describedby="Confirm New Password Label"
          />
          <PasswordField
            label="Confirm New Password"
            error={
              errors.confirmPassword?.message ||
              (confirmPassword && confirmPassword !== newPassword
                ? "Passwords do not match."
                : undefined)
            }
            {...register("confirmPassword", {
              required: "Please confirm your password.",
            })}
            autoComplete="new-password"
          />
        </div>
      </StandardLayout>
    </form>
  );
};

export default PasswordTest;
