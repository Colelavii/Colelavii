import { useState } from "react";
import { variables } from "../Variables";
import axios from "axios";

interface UseCheckCredentialsReturn {
  checkCredentials: (
    username: string | undefined,
    password: string
  ) => Promise<boolean>;
  isLoading: boolean;
  error: string | null;
}

export function useCheckCredentials(): UseCheckCredentialsReturn {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const checkCredentials = async (
    username: string | undefined,
    password: string
  ): Promise<boolean> => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await axios.get(`${variables.CHECK_CREDENTIALS}`, {
        params: {
          username,
          password,
        },
      });

      if (typeof response.data === "boolean") {
        return response.data;
      }

      setIsLoading(false);

      return false;
    } catch (err) {
      setIsLoading(false);

      if (axios.isAxiosError(err) && err.response?.data.detailMessage) {
        setError(err.response.data.detailMessage);
      } else {
        setError("Failed to check credentials");
      }
      return false;
    }
  };
  return { checkCredentials, isLoading, error };
}
