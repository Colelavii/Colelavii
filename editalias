import { FormProvider, SubmitHandler, useForm } from "react-hook-form";
import FormLabel from "../../label/FormLabel";

import Input from "../../textfield/Input";
import FormStyles from "../../FormFields.module.css";
import ModalHeader from "../ModalHeader";
import ModalBody from "../ModalBody";
import Modal, { ModalProps } from "../Modal";
import ModalFooter from "../ModalFooter";
import Button from "../../button/Button";
import { FormInputs, IEwallet } from "../../../hooks/useEwallets";
import ModalStyles from "../Modal.module.css";
import { useWalletContext } from "../../../state-management/contexts/walletContext";
import ModalError from "../../errormessage/ErrorMessage";
import { useUpdateAliasMutation } from "../../eservice/eservsidebar/toolssidebar/settings/ewallet/hooks/useUpdateWalletAlias";
import { useState } from "react";
import ErrorMessage from "../../errormessage/ErrorMessage";
import axios from "axios";
import { SuccessModal } from "../success/SuccessModal";
import { toast } from "react-toastify";
import { useModal } from "../../../state-management/contexts/modalContext";

const EditEwalletAliasModal = ({ isOpen, onClose }: ModalProps) => {
  const {
    selectedWallet,
    setFormError,
    // updateAlias,
    closeModals,
  } = useWalletContext();
  const {
    mutateAsync: updateAlias,
    isLoading,
    error,
  } = useUpdateAliasMutation();
  const { openModal } = useModal();
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [submissionError, setSubmissionError] = useState<string | null>(null);

  const methods = useForm<IEwallet>({ defaultValues: selectedWallet || {} });
  const {
    register,
    handleSubmit,
    reset, // Used to reset the form with new default values
    formState: { errors, isDirty },
  } = methods;

  const onSubmit = (data: IEwallet) => {
    setFormError(undefined); // Clear any previous errors

    if (selectedWallet) {
      updateAlias(
        { walletId: selectedWallet.id, alias: data.alias },
        {
          onSuccess: () => {
            // toast.success("Your eWallet name was updated successfully!");
            reset();
            openModal("success", "Your eWallet name was updated successfully!");
            // setShowSuccessModal(true);
            // closeModals();
          },
          onError: (error) => {
            const errorMessage =
              axios.isAxiosError(error) && error.response?.data.detailMessage
                ? error.response.data.detailMessage
                : "Failed to update alias. Please try again.";
            setSubmissionError(errorMessage);
            openModal("error", errorMessage);
          },
        }
      );
    }
  };

  const handleCancelClick = () => {
    closeModals();
    reset();
  };
  const handleModalClose = () => {
    closeModals();
    setShowSuccessModal(false);
  };
  if (!isOpen) return null; // Only render the modal if it's open

  return (
    <>
      <Modal isOpen={isOpen}>
        <ModalHeader children="Edit Ewallet Name" onClose={handleCancelClick} />
        <FormProvider {...methods}>
          <form onSubmit={handleSubmit(onSubmit)}>
            <ModalBody>
              {/* Error Message */}
              {submissionError && (
                <ErrorMessage errorMessage={submissionError} showPrefix />
              )}
              {/* If there's a direct error from the hook (might be the same as submissionError) */}
              {error && !submissionError && (
                <ErrorMessage errorMessage={error.message} showPrefix />
              )}

              <div className={FormStyles["input-column"]}>
                <FormLabel htmlFor="alias" label="eWallet Name" />
                <Input
                  id="alias"
                  type="text"
                  placeholder="eWallet Nickname"
                  register={register("alias", {
                    required: "The eWallet Name field is required",
                    minLength: {
                      value: 5,
                      message:
                        "The eWallet Name must be at least 5 characters long",
                    },
                    maxLength: {
                      value: 25,
                      message:
                        "The eWallet Name must be at most 25 characters long",
                    },
                  })}
                  ariaDescribedBy="aliasError"
                />
                {errors.alias && (
                  <ErrorMessage
                    errorMessage={errors.alias.message}
                    id="aliasError"
                  />
                )}
              </div>
            </ModalBody>

            <ModalFooter>
              <Button
                variant="cancel-secondary"
                onClick={handleCancelClick}
                type="button"
              >
                Cancel
              </Button>
              <Button
                variant="secondary"
                type="submit"
                disabled={!isDirty || isLoading}
              >
                {isLoading ? "Creating..." : "Create"}
              </Button>
            </ModalFooter>
          </form>
        </FormProvider>
      </Modal>
      {/* Success Modal */}
      {/* {showSuccessModal && (
        <SuccessModal
          isOpen={showSuccessModal}
          message="Your eWallet name was updated successfully!"
          onClose={handleModalClose}
        />
      )} */}
    </>
  );
};

export default EditEwalletAliasModal;

import React, { createContext, ReactNode, useContext, useState } from "react";

type ModalType = "success" | "error" | "warning" | "info" | null;

interface ModalContextType {
  modalType: ModalType;
  modalMessage: string | string[];
  openModal: (type: ModalType, message?: string | string[]) => void;
  closeModal: () => void;
}

const ModalContext = createContext<ModalContextType>({} as ModalContextType);

export const useModal = () => {
  const context = useContext(ModalContext);
  if (!context) {
    throw new Error("useModal must be used within a ModalProvider");
  }
  return context;
};

export const ModalProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [modalType, setModalType] = useState<ModalType>(null);
  const [modalMessage, setModalMessage] = useState<string | string[]>("");
  //  const [isOpen, setIsOpen] = useState<boolean>(false);

  const openModal = (type: ModalType, message?: string | string[]) => {
    setModalType(type);
    setModalMessage(message || "");
    //setIsOpen(true);
  };

  const closeModal = () => {
    setModalType(null);
    setModalMessage("");
  };

  return (
    <ModalContext.Provider
      value={{ modalType, modalMessage, openModal, closeModal }}
    >
      {children}
    </ModalContext.Provider>
  );
};
import React from "react";
import { useModal } from "../state-management/contexts/modalContext";
import { SuccessModal } from "./modals/success/SuccessModal";
import ErrorModal from "./modals/errorModal/ErrorModal";

const ModalManager: React.FC = () => {
  const { modalType, modalMessage, closeModal } = useModal();
  return (
    <>
      {modalType === "success" && (
        <SuccessModal message={modalMessage} onClose={closeModal} />
      )}
      {modalType === "error" && (
        <ErrorModal errors={modalMessage} onClose={closeModal} />
      )}
    </>
  );
};

export default ModalManager;
import React from "react";
import ReactDOM from "react-dom";
import ModalBody from "../ModalBody";
import Modal, { ModalProps } from "../Modal";
import ModalFooter from "../ModalFooter";
import Button from "../../button/Button";
import Success from "../../../assets/Success.svg";

interface SuccessModalProps extends ModalProps {
  message: string | string[];
  onClose: () => void;
}

export const SuccessModal: React.FC<SuccessModalProps> = ({
  message,
  isOpen,
  onClose,
}) => {
  if (!isOpen) return null;

  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <ModalBody align="center" imageUrl={Success} bodyTitle="Success">
        <p>{message}</p>
      </ModalBody>
      <ModalFooter align="center">
        <Button variant="success" onClick={onClose}>
          Close
        </Button>
      </ModalFooter>
    </Modal>
  );
};

import {
  useMutation,
  UseMutationResult,
  useQueryClient,
} from "@tanstack/react-query";
import axios, { AxiosError } from "axios";
import { CACHE_KEY_EWALLETS, variables } from "../../../../../../../Variables";
import {
  ErrorResponse,
  IEwallet,
} from "../../../../../../../hooks/useEwallets";

interface UpdateWalletAliasArgs {
  walletId: number | undefined;
  alias: string;
}

export function useUpdateAliasMutation() {
  const queryClient = useQueryClient();
  return useMutation<
    IEwallet,
    AxiosError<ErrorResponse>,
    UpdateWalletAliasArgs
  >(
    async ({ walletId, alias }) => {
      const response = await axios.post<IEwallet>(
        `${variables.UPDATE_ALIAS}`,
        { alias },
        { params: { walletId } }
      );

      return response.data;
    },
    {
      onSuccess: () => {
        queryClient.invalidateQueries([CACHE_KEY_EWALLETS]);
      },
    }
  );
}
