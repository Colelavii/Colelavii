import React, { createContext, ReactNode, useContext } from "react";

export interface CartItem {
  name: string;
  accountIdentifier: string;
  description: string;
  amount: number;
  selected?: boolean; // To track selected items in cart
}

interface CartContextType {
  items: CartItem[];
  total: number;
  selectedItemsCount: number; // Track number of selected items
  addItem: (item: CartItem) => void;
  removeItem: (index: number) => void;
  clearCart: () => void;
  toggleSelectItem: (index: number) => void;
  toggleSelectAll: (selectAll: boolean) => void;
}

const CartContext = createContext<CartContextType>({} as CartContextType);

export const useCartContext = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error("useCartContext must be used within a CartContextProvider");
  }
  return context;
};

export const CartProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [actualCartItems, setActualCartItems] = React.useState<CartItem[]>([]);
  const [items, setItems] = React.useState<CartItem[]>(actualCartItems);

  const total = items
    .filter((item) => item.selected)
    .reduce((sum, item) => sum + item.amount, 0);
  const selectedItemsCount = items.filter((item) => item.selected).length;

  const addItem = (item: CartItem) => {
    setItems([...items, item]);
  };

  const removeItem = (index: number) => {
    setActualCartItems((prev) => prev.filter((_, i) => i !== index));

    // //  Temporarily mark the item as "removing"
    // const itemElement = document.getElementById(`cart-item-${index}`);
    // if (itemElement) {
    //   itemElement.classList.add("removing");
    // }

    //  Delay the actual removal to allow the animation to play
    setTimeout(() => {
      setItems((prev) => prev.filter((_, i) => i !== index));
    }, 300); // To match the duration of the CSS transition
  };

  const clearCart = () => setItems([]);
  const toggleSelectItem = (index: number) => {
    setItems((prev) => {
      const updatedItems = [...prev];
      updatedItems[index].selected = !updatedItems[index].selected;
      return updatedItems;
    });
  };
  const toggleSelectAll = (selectAll: boolean) => {
    setItems((prev) => prev.map((item) => ({ ...item, selected: selectAll })));
  };

  const value = {
    items,
    total,
    selectedItemsCount,
    addItem,
    removeItem,
    clearCart,
    toggleSelectItem,
    toggleSelectAll,
  };
  return <CartContext.Provider value={value}>{children} </CartContext.Provider>;
};
