import React from "react";
import ModalBody from "../../../../../modals/ModalBody";
import EwalletStyles from "./eWallet.module.css";
import { ModalProps } from "../../../../../modals/Modal";
import { IEwallet } from "../../../../../../hooks/useEwallets";
import { useWalletContext } from "../../../../../../state-management/contexts/walletContext";

interface EwalletMenuProps extends ModalProps {
  wallet: IEwallet | undefined;
  isPreferred: boolean | undefined;
  permission: string[] | undefined;
}
const EwalletMenu: React.FC<EwalletMenuProps> = ({
  wallet,
  isPreferred,
  permission,
  isOpen,
  onClose,
}) => {
  const {
    openTopUpModal,
    openAliasModal,
    openPreferredModal,
    handleAddSubscriptionClick,
  } = useWalletContext();
  const isAdministrator = permission?.includes("Administrator");

  if (!isOpen) return null;

  const handleAliasClick = () => {
    openAliasModal(wallet!);
  };
  const handlePreferredClick = () => {
    openPreferredModal(wallet!);
  };

  const handleSubscriptionClick = () => {
    handleAddSubscriptionClick();
  };

  const handleTopUpClick = () => {
    openTopUpModal();
  };

  return (
    <>
      <ModalBody
        className={EwalletStyles["ewallet-dropdown-content"]}
        isOpen={isOpen}
      >
        <ul onClick={onClose}>
          {isAdministrator && (
            <>
              <li onClick={handleAliasClick}>Edit name</li>
              <li onClick={handleSubscriptionClick}>Add subscription</li>
              <li onClick={handleTopUpClick}>Top-up wallet</li>
              <li onClick={() => handlePreferredClick()}>
                {isPreferred ? null : "Set as preferred"}
              </li>
            </>
          )}{" "}
        </ul>
      </ModalBody>
    </>
  );
};

export default EwalletMenu;
import React, { useState } from "react";
import { CiMenuKebab } from "react-icons/ci";
import EwalletMenu from "./EwalletMenu";
import styles from "./eWallet.module.css";
import { IEwallet } from "../../../../../../hooks/useEwallets";
import EwalletDetails from "./EwalletDetails";
import { ModalProps } from "../../../../../modals/Modal";
import ConfirmPreferredAccountModal from "../../../../../modals/updateModals/ConfirmPreferredAccountModal";
import useGetSubscriptionStatusOnWallet from "../../../../../../hooks/useGetSubscriptionStatusOnWallet";
import CautionModal from "../../../../../modals/caution/CautionModal";
import { useWalletContext } from "../../../../../../state-management/contexts/walletContext";
import EditEwalletAliasModal from "../../../../../modals/updateModals/EditEwalletAliasModal";
import AddtoCartModal from "../../../../../modals/addtocart/AddtoCartModal";
import AddSubscriptionModal from "../../../../../modals/addSubscription/AddSubscriptionModal";
import TopUpeWallet from "../../../../../modals/topupeWallet/TopUpeWallet";

interface EwalletCardProps extends ModalProps {
  wallet: IEwallet | undefined;
  isPreferred: boolean | undefined;
  onToggleMenu: () => void;
}
const EwalletCard: React.FC<EwalletCardProps> = ({
  wallet,
  isOpen,
  isPreferred,
  onClose,
  onToggleMenu,
}) => {
  const {
    setSelectedWallet,
    isPreferredModalOpen,
    isAliasModalOpen,
    isTopUpModalOpen,
    isAddToCartModalOpen,
    isAddSubscriptionModalOpen,
    isCautionModalOpen,
  } = useWalletContext();

  // const [isAddSubscriptionOpen, setAddSubscriptionOpen] = useState(false);
  // const [isCautionModalOpen, setCautionModalOpen] = useState(false);

  // const { data: subscription } = useGetSubscriptionStatusOnWallet(wallet?.id);

  // const handleAddClick = () => {
  //   if (subscription?.activeSubscription === 0) {
  //     setAddSubscriptionOpen(true);
  //   }
  //   setCautionModalOpen(true);
  // };
  // const handleCloseCautionModal = () => {
  //   setCautionModalOpen(false);
  // };

  const handleKebabClick = () => {
    setSelectedWallet(wallet); //  Set the wallet in context
    onToggleMenu();
  };
  const cardClass = `${styles["ewallet-card"]} ${
    isPreferred ? styles.preferred : ""
  }`;

  return (
    <div key={wallet?.id} className={cardClass}>
      <div className={styles["ewallet-card-header"]}>
        <h3>{wallet?.isPreferred ? "Primary Wallet" : wallet?.alias}</h3>
        {wallet?.isPreferred && (
          <div className={styles["preferred-text"]}>PREFERRED</div>
        )}
        <div key={wallet?.id} className={styles["ewallet-dropdown"]}>
          <div className={styles.circle}>
            <CiMenuKebab className={styles.kebab} onClick={handleKebabClick} />
          </div>
          {/* )} */}
          <EwalletMenu
            isOpen={isOpen}
            onClose={onClose}
            wallet={wallet}
            isPreferred={wallet?.isPreferred}
            permission={wallet?.permission}
          />
        </div>
      </div>
      <div className={styles["ewallet-wrap"]}>
        <h6>WALLET NUMBER</h6>
        <p className={styles["wallet-number"]}>{wallet?.accountIdentifier}</p>
      </div>
      <div className={styles["ewallet-wrap"]}>
        <h6>BALANCE</h6>
        <p className={styles.balance}>
          $
          {wallet?.amount.toLocaleString("en-US", {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
          })}
        </p>
      </div>
      <EwalletDetails
        walletId={wallet?.id}
        usersOnWallet={wallet?.usersOnWallet}
      />
      {isAliasModalOpen && <EditEwalletAliasModal />}
      {isPreferredModalOpen && <ConfirmPreferredAccountModal />}
      {isAddSubscriptionModalOpen && <AddSubscriptionModal />}
      <CautionModal isOpen={isCautionModalOpen} />
      {/* {isAddToCartModalOpen && <AddtoCartModal />} */}
      <TopUpeWallet isOpen={isTopUpModalOpen} />
    </div>
  );
};

export default EwalletCard;
import React, { createContext, ReactNode, useContext } from "react";

export interface CartItem {
  name: string;
  accountIdentifier: string;
  description: string;
  amount: number;
}

interface CartContextType {
  items: CartItem[];
  total: number;
  addItem: (item: CartItem) => void;
  removeItem: (index: number) => void;
  clearCart: () => void;
}

const CartContext = createContext<CartContextType>({} as CartContextType);

export const useCartContext = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error("useCartContext must be used within a CartContextProvider");
  }
  return context;
};

export const CartProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [items, setItems] = React.useState<CartItem[]>([]);
  const total = items.reduce((sum, item) => sum + item.amount, 0);

  const addItem = (item: CartItem) => setItems([...items, item]);

  const removeItem = (index: number) => {
    setItems((prev) => prev.filter((_, i) => i !== index));
  };

  const clearCart = () => setItems([]);

  const value = {
    items,
    total,
    addItem,
    removeItem,
    clearCart,
  };
  return <CartContext.Provider value={value}>{children} </CartContext.Provider>;
};
import { createContext, ReactNode, useContext, useState } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { IEwallet, useGetEwallets } from "../../hooks/useEwallets";
import AuthContext from "./authContext";
import axios from "axios";
import { CACHE_KEY_EWALLETS, variables } from "../../Variables";
import { toast } from "react-toastify";
import { CartItem, useCartContext } from "./cartContext";

interface WalletContextType {
  wallets: IEwallet[] | undefined;
  isLoading: boolean;
  error: any;
  selectedWallet: IEwallet | undefined;
  cartItems: number;
  cartTotal: number;
  isPreferredModalOpen: boolean;
  isAliasModalOpen: boolean;
  isAddSubscriptionModalOpen: boolean;
  isCautionModalOpen: boolean;
  isAddToCartModalOpen: boolean;
  isTopUpModalOpen: boolean;
  openMenuIndex: number | null;
  toggleMenu: (index: number | null) => void;
  closeMenu: () => void;
  incrementCart: (amount: number) => void;
  // openAddSubscriptionModal: () => void;
  closeAddToCart: () => void;
  closeCautionModal: () => void;
  closeAddSubscriptionModalOpen: () => void;
  setAddSubscriptionModalOpen: (set: boolean) => void;
  setAddToCartModalOpen: (set: boolean) => void;
  setSelectedWallet: (wallet: IEwallet | undefined) => void;
  performWalletAction : (action: CartItem) => void;
  openPreferredModal: (wallet: IEwallet | undefined) => void;
  setPreferredWallet: (preferredAccount: string | undefined) => void;
  openAliasModal: (wallet: IEwallet | undefined) => void;
  openTopUpModal: () => void;
  closeModals: () => void;
  updateAlias: (alias: IEwallet & { ewalletId: number | undefined }) => void;
  refetchWallets: () => void;
  handleAddSubscriptionClick: () => void;
  updateAliasLoading: boolean;
  updateAliasError: any;
  setPreferredAccountLoading: boolean;
  formError: string | null;
  setFormError: (formError: string | null) => void;
}

const WalletContext = createContext<WalletContextType>({} as WalletContextType);

export const useWalletContext = () => {
  const context = useContext(WalletContext);
  if (!context) {
    throw new Error(
      "useWalletContext must be used within a WalletContextProvider"
    );
  }
  return context;
};

export const WalletProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const queryClient = useQueryClient();
  const [selectedWallet, setSelectedWallet] = useState<IEwallet | undefined>(
    undefined
  );
  const [openMenuIndex, setOpenMenuIndex] = useState<number | null>(null);

  const [activeSubscription, setActiveSubscription] = useState<number | null>(
    null
  );

  const [formError, setFormError] = useState<string | null>(null);
  const [cartItems, setCartItems] = useState(0);
  const [cartTotal, setCartTotal] = useState(0);

  const [isAddToCartModalOpen, setAddToCartModalOpen] = useState(false);

  const [isAddSubscriptionModalOpen, setAddSubscriptionModalOpen] =
    useState(false);
  const [isTopUpModalOpen, setTopUpModalOpen] = useState(false);
  const [isAliasModalOpen, setAliasModalOpen] = useState(false);
  const [isPreferredModalOpen, setPreferredModalOpen] = useState(false);
  const [isCautionModalOpen, setCautionModalOpen] = useState(false);

  const page = 1;
  const pageSize = 10;

  const { authState } = useContext(AuthContext);

  //  Fetch wallets
  const {
    data: wallets,
    isLoading,
    error,
    refetch,
  } = useGetEwallets(authState.subscriberId, page, pageSize);

  const cartContext = useCartContext();
  const performWalletAction = (action: CartItem) => {
    cartContext.addItem(action); // Calls CartContext's addItem
  }
  const toggleMenu = (index: number | null) => {
    setOpenMenuIndex((prev) => (prev === index ? null : index));
  };

  const closeMenu = () => {
    setOpenMenuIndex(null);
  };

  const closeAddSubscriptionModalOpen = () => {
    setAddSubscriptionModalOpen(false);
  };

  const closeCautionModal = () => {
    setCautionModalOpen(false);
  };

  const closeAddToCart = () => {
    setAddToCartModalOpen(false);
  };
  const fetchActiveSubscription = async (walletId: number | undefined) => {
    try {
      const response = await axios.get(
        `${variables.SUBSCRIPTION_STATUS}${walletId}`
      );
      setActiveSubscription(response.data.activeSubscription);
      return response.data.activeSubscription;
    } catch (error) {
      console.error("Failed to fetch subscription status", error);
      setActiveSubscription(null);
    }
  };

  const handleAddSubscriptionClick = async () => {
    console.log(selectedWallet);

    if (selectedWallet) {
      const subscription = await fetchActiveSubscription(selectedWallet.id);
      if (subscription > 0) {
        console.log("has subscription");
        setCautionModalOpen(true); // Display caution modal
      } else {
        setAddSubscriptionModalOpen(true); // Proceed to add subscription
        console.log("does not have subscription");
      }
    }
  };
  const openPreferredModal = (wallet: IEwallet | undefined) => {
    setSelectedWallet(wallet);
    setPreferredModalOpen(true);
  };

  //  Mutation to set preferred wallet
  const setPreferredWalletMutation = useMutation(
    (preferredAccount: string | undefined) =>
      axios.post(`${variables.UPDATE_PREFERRED}${authState.subscriberId}`, {
        preferredAccount: preferredAccount,
      }),
    {
      onSuccess: () => {
        queryClient.invalidateQueries([CACHE_KEY_EWALLETS]);
        setPreferredModalOpen(false);
      },

      onError: (error: any) => {
        console.error("Error Response", error);
        let errorMessage = "An error occurred";
        if (error.response) {
          const backendError = error.response.data;
          if (backendError.errors && backendError.errors.subscriberId) {
            errorMessage = backendError.errors.subscriberId[0];
          } else if (backendError.title) {
            errorMessage = backendError.title;
            console.log(backendError.title);
          }
        }
        setFormError(errorMessage);
      },
    }
  );
  const setPreferredWallet = (preferredAccount: string | undefined) => {
    setPreferredWalletMutation.mutate(preferredAccount);
  };
  const openTopUpModal = () => {
    setTopUpModalOpen(true);
  };
  const openAliasModal = (wallet: IEwallet | undefined) => {
    setSelectedWallet(wallet);
    setAliasModalOpen(true);
  };

  //  Mutation to update alias
  const updateAliasMutation = useMutation(
    async (alias: IEwallet): Promise<IEwallet> => {
      const response = await axios.post<IEwallet>(
        `${variables.UPDATE_ALIAS}${selectedWallet?.id}`,
        alias
      );
      return response.data;
    },
    {
      onSuccess: () => {
        queryClient.invalidateQueries([CACHE_KEY_EWALLETS]);
        closeModals();
        toast.success("Ewallet Name updated successfully!", {
          autoClose: 3000,
        });
      },
      onError: (error: any) => {
        let errorMessage = "An error occurred";
        if (error.response) {
          const backendError = error.response.data;
          if (backendError.errors && backendError.errors.walletId) {
            errorMessage = backendError.errors.walletId[0];
          } else if (backendError.title) {
            errorMessage = backendError.title;
            console.log(backendError.title);
          }
        }
        setFormError(errorMessage);
      },
    }
  );

  const updateAlias = (data: IEwallet & { ewalletId: number | undefined }) => {
    updateAliasMutation.mutate(data);
  };

  const incrementCart = (amount: number) => {
    setCartItems((prev) => prev + 1);
    setCartTotal((prev) => prev + amount);
  };

  const closeModals = () => {
    setPreferredModalOpen(false);
    setAliasModalOpen(false);
    setSelectedWallet(undefined);
    setFormError(null);
    setAddSubscriptionModalOpen(false);
    setCautionModalOpen(false);
    setAddSubscriptionModalOpen(false);
    setAddToCartModalOpen(false);
    setTopUpModalOpen(false);
  };

  const value = {
    wallets,
    isLoading,
    error,
    openMenuIndex,
    selectedWallet,
    cartItems,
    cartTotal,
    isPreferredModalOpen,
    isAliasModalOpen,
    isAddSubscriptionModalOpen,
    isCautionModalOpen,
    isAddToCartModalOpen,
    isTopUpModalOpen,
    toggleMenu,
    closeMenu,
    closeAddToCart,
    closeAddSubscriptionModalOpen,
    closeCautionModal,
    incrementCart,
    setSelectedWallet,
    performWalletAction,
    openPreferredModal,
    setAddToCartModalOpen,
    setAddSubscriptionModalOpen,
    setPreferredWallet,
    openTopUpModal,
    openAliasModal,
    closeModals,
    updateAlias,
    refetchWallets: refetch,
    handleAddSubscriptionClick,
    updateAliasLoading: updateAliasMutation.isLoading,
    updateAliasError: updateAliasMutation.error,
    setPreferredAccountLoading: setPreferredWalletMutation.isLoading,
    formError,
    setFormError,
  };

  return (
    <WalletContext.Provider value={value}>{children} </WalletContext.Provider>
  );
};

export { WalletContext };
import PageLayout from "../../../../layout/PageLayout";
import Breadcrumbs from "../../../Breadcrumbs";
import { useWalletContext } from "../../../../../state-management/contexts/walletContext";
import styles from "./Cart.module.css";
import { useCartContext } from "../../../../../state-management/contexts/cartContext";
const Cart = () => {
  const { cartTotal, cartItems } = useWalletContext();
  const { items, total, addItem, removeItem, clearCart } = useCartContext();
  return (
    <PageLayout breadcrumb={<Breadcrumbs />} title="Cart">
      <div className={styles.cartPage}>
        {/* Left Section */}
        <div className={styles.leftSection}>
          {/** Header */}
          <h2>Cart</h2>
          <div className={styles.cartHeader}>
            <a
              href="#"
              onClick={() => removeItem}
              className={styles.deselectLink}
            >
              Deselect all items
            </a>
            <span className={styles.priceHeader}> Price</span>
          </div>
          <hr />
          {/** Cart Items */}
          {/* {items?.map((item, index) => (
            <div key={index} className={styles.cartItemRow}>
              {/* Checkbox */}
          {/* <input type="checkbox" className={styles.checkbox} /> */}
          {/** Item Details *
              <div className={styles.itemDetails}>
                <div className={styles.itemName}> {item.name}</div>
                <div className={styles.accountInfo}>
                  {item.accountIdentifier}
                  <button
                    className={styles.deleteButton}
                    onClick={() => removeItem(item.id)}
                  >
                    Delete
                  </button>
                </div>
              </div>
              {/** Description *
              <div className={styles.itemDescription}> Description: {items.description}
            </div>
            {/**Price *
            <div className={styles.itemPrice}>
                ${item.amount}
            </div>
          ))} */}
          <div className={styles.cartItemRow}>
            {/* Checkbox */}
            <input type="checkbox" className={styles.checkbox} />
            {/** Item Details */}
            <div className={styles.itemDetails}>
              <div className={styles.itemName}> yam</div>
              <div className={styles.accountInfo}>
                j7-k8
                <a
                  href="#"
                  onClick={() => removeItem}
                  className={styles.deleteButton}
                >
                  Delete
                </a>
              </div>
            </div>
            {/** Description */}
            <div className={styles.itemDescription}> Description:</div>
            {/**Price */}
            <div className={styles.itemPrice}>$ 10.00</div>
          </div>
          <hr />
          {/**Subtotal */}
          <div className={styles.subtotal}>
            {cartItems ? (
              <p>
                Subtotal ({cartItems} items): ${cartTotal}
              </p>
            ) : (
              "No items selected"
            )}
          </div>
        </div>
        {/** Right Section */}
        <div className={styles.rightSection}>
          <>
            {cartItems ? (
              <p>
                Subtotal ({cartItems} items): ${cartTotal}
              </p>
            ) : (
              "No items selected"
            )}
          </>
          <button className={styles.checkoutButton} onClick={() => addItem}>
            {" "}
            Proceed to checkout
          </button>
        </div>
      </div>
    </PageLayout>
  );
};

export default Cart;
