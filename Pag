Below is an updated version of the Pagination component (as previously provided) along with an example of how to integrate it with your WalletContext. In this example, we assume that your WalletContext holds state for the current page, page size, and a total number of wallets, and exposes functions to update those values and refetch the wallet data.

---

### Pagination.tsx

This component is reusable and calls the `onPageChange` callback with the new page and page size.

```tsx
import React, { useState, useEffect } from "react";
import styles from "./Pagination.module.css";

interface PaginationProps {
  totalItems: number;
  initialPage?: number;
  initialItemsPerPage?: number;
  onPageChange?: (page: number, itemsPerPage: number) => void;
  itemsPerPageOptions?: number[];
}

const Pagination: React.FC<PaginationProps> = ({
  totalItems,
  initialPage = 1,
  initialItemsPerPage = 10,
  onPageChange,
  itemsPerPageOptions = [2, 4, 6, 8, 10],
}) => {
  const [currentPage, setCurrentPage] = useState<number>(initialPage);
  const [itemsPerPage, setItemsPerPage] = useState<number>(initialItemsPerPage);

  const totalPages = Math.ceil(totalItems / itemsPerPage);

  // Ensure that if totalItems changes and currentPage exceeds totalPages, reset currentPage.
  useEffect(() => {
    if (currentPage > totalPages) {
      setCurrentPage(totalPages);
      onPageChange && onPageChange(totalPages, itemsPerPage);
    }
  }, [totalItems, itemsPerPage, totalPages, currentPage, onPageChange]);

  const handleItemsPerPageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newItemsPerPage = Number(e.target.value);
    setItemsPerPage(newItemsPerPage);
    setCurrentPage(1);
    onPageChange && onPageChange(1, newItemsPerPage);
  };

  const handlePageChange = (direction: "prev" | "next") => {
    let newPage = currentPage;
    if (direction === "prev" && currentPage > 1) {
      newPage = currentPage - 1;
    } else if (direction === "next" && currentPage < totalPages) {
      newPage = currentPage + 1;
    }
    if (newPage !== currentPage) {
      setCurrentPage(newPage);
      onPageChange && onPageChange(newPage, itemsPerPage);
    }
  };

  const startItem = totalItems > 0 ? (currentPage - 1) * itemsPerPage + 1 : 0;
  const endItem = Math.min(currentPage * itemsPerPage, totalItems);

  return (
    <div className={styles.paginationContainer}>
      <div className={styles.itemsPerPage}>
        <span>Items per page: </span>
        <select value={itemsPerPage} onChange={handleItemsPerPageChange} aria-label="Select items per page">
          {itemsPerPageOptions.map((option) => (
            <option key={option} value={option}>
              {option}
            </option>
          ))}
        </select>
      </div>
      <div className={styles.pageInfo}>
        {totalItems === 0 ? (
          <span>No items selected</span>
        ) : (
          <span>
            {startItem} - {endItem} of {totalItems}
          </span>
        )}
      </div>
      <div className={styles.buttons}>
        <button
          type="button"
          onClick={() => handlePageChange("prev")}
          disabled={currentPage <= 1}
          aria-label="Previous page"
        >
          <i className="fa fa-angle-left" aria-hidden="true" />
        </button>
        <button
          type="button"
          onClick={() => handlePageChange("next")}
          disabled={currentPage >= totalPages}
          aria-label="Next page"
        >
          <i className="fa fa-angle-right" aria-hidden="true" />
        </button>
      </div>
    </div>
  );
};

export default Pagination;
```

### Pagination.module.css

```css
.paginationContainer {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem;
  border-top: 1px solid #ddd;
  margin-top: 1rem;
  font-size: 1rem;
  flex-wrap: wrap;
}

.itemsPerPage {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.itemsPerPage select {
  padding: 0.25rem;
  font-size: 1rem;
}

.pageInfo {
  flex-grow: 1;
  text-align: center;
  margin: 0.5rem 0;
}

.buttons {
  display: flex;
  gap: 0.5rem;
}

.buttons button {
  background-color: transparent;
  border: 1px solid #ccc;
  padding: 0.5rem;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
}

.buttons button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}
```

---

### 3. Example Usage with WalletContext

Assuming your WalletContext (or the hook that fetches wallets) manages `page` and `pageSize` state, you can integrate the Pagination component like this:

```tsx
// EWalletPage.tsx
import React from "react";
import StandardLayout from "../../layouts/StandardLayout/StandardLayout";
import EwalletCard from "../../components/ewallet/EwalletCard";
import Pagination from "../../components/pagination/Pagination";
import { useWalletContext } from "../../state-management/contexts/walletContext";
import styles from "./EWallet.module.css";

const EWalletPage: React.FC = () => {
  // Assuming WalletContext provides these:
  const {
    wallets,
    page,
    pageSize,
    setPage,
    setPageSize,
    totalWallets,
    refetchWallets,
  } = useWalletContext();

  const handlePageChange = (newPage: number, newPageSize: number) => {
    setPage(newPage);
    setPageSize(newPageSize);
    // Refetch wallet data based on new pagination values:
    refetchWallets();
  };

  return (
    <StandardLayout header="My eWallet">
      <div className={styles.ewalletCards}>
        {wallets?.map((wallet) => (
          <EwalletCard key={wallet.id} wallet={wallet} />
        ))}
      </div>
      <Pagination
        totalItems={totalWallets}
        initialPage={page}
        initialItemsPerPage={pageSize}
        onPageChange={handlePageChange}
        itemsPerPageOptions={[5, 10, 20, 50]}
      />
    </StandardLayout>
  );
};

export default EWalletPage;
```

### Explanation

- The **Pagination** component receives `totalItems`, `initialPage`, `initialItemsPerPage`, and a callback `onPageChange`.
- In your **WalletContext**, you should have state for `page`, `pageSize`, and a `totalWallets` property (the total number of wallets available) plus setter functions.
- When the user changes the page or items per page via the pagination component, `handlePageChange` is called. It updates the context state (via `setPage` and `setPageSize`) and calls `refetchWallets()` to load the new data.
- The Pagination component itself remains reusable; you only need to connect it to your context in the usage example.

---

### Best Practices

- **Reusable Component**: The Pagination component is designed to be generic. It doesn’t know anything about wallets—just total items and a callback.
- **Separation of Concerns**: The WalletContext manages fetching data (with page, pageSize), and the Pagination component only handles navigation UI.
- **Performance**: By only calling `refetchWallets()` when necessary, you avoid unnecessary network calls.
- **Flexibility**: You can adjust `itemsPerPageOptions` and styling without changing the pagination logic.

This approach should give you a robust, reusable pagination component that integrates seamlessly with your WalletContext-based eWallet page.
