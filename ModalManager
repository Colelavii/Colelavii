import React from "react";
import { useModal, ModalType } from "../state-management/contexts/modalContext";
import { SuccessModal } from "./modals/success/SuccessModal";
import ErrorModal from "./modals/errorModal/ErrorModal";
import AddNewEwalletModal from "./eservice/eservsidebar/toolssidebar/settings/ewallet/modals/AddNewEwalletModal";
import EditEwalletAliasModal from "./modals/updateModals/EditEwalletAliasModal";
import AddSubscriptionModal from "./modals/addSubscription/AddSubscriptionModal";
import AddtoCartModal from "./modals/addtocart/AddtoCartModal";
import CautionModal from "./modals/caution/CautionModal";
import TopUpeWallet from "./modals/topupeWallet/TopUpeWallet";
import ConfirmPreferredAccountModal from "./eservice/eservsidebar/toolssidebar/settings/ewallet/modals/ConfirmPreferredAccountModal";
import AddDeliveryAddressModal from "./modals/addModals/AddDeliveryAddressModal";
import DeleteModal from "./modals/deleteModals/DeleteModal";
import UpdateDeliveryAddressModal from "./modals/updateModals/UpdateDeliveryAddressModal";
import AddRecipientModal from "./eservice/eservsidebar/toolssidebar/settings/recipients/modals/AddRecipientModal";
import UpdateRecipientModal from "./eservice/eservsidebar/toolssidebar/settings/recipients/modals/UpdateRecipientModal";
import DeleteRecipientModal from "./eservice/eservsidebar/toolssidebar/settings/recipients/modals/DeleteRecipientModal";
import AddNewUserModal from "./modals/addModals/AddUserModal";
import DeleteUserModal from "./modals/deleteModals/DeleteUserModal";
import ConfirmArchivedWalletModal from "./eservice/eservsidebar/toolssidebar/settings/ewallet/modals/ConfirmArchiveWalletModal";
import ConfirmUnArchiveWalletModal from "./eservice/eservsidebar/toolssidebar/settings/ewallet/modals/ConfirmUnArchiveWallet";
import ConfirmChangesModal from "./eservice/eservsidebar/toolssidebar/settings/profile/modals/ConfirmChangesModal";
import GeneratePaymentModal from "./eservice/eservsidebar/toolssidebar/settings/payment/modals/GeneratePaymentModal";
import GeneratePaymentHistoryModal from "./eservice/eservsidebar/toolssidebar/settings/payment/modals/GeneratePaymentModal";

const ModalManager: React.FC = () => {
  const { modalType, modalData, modalMessage, closeModal } = useModal();
  console.log("ModalManager Rendered: ");
  console.log("ModalManager State: ", { modalType, modalData, modalMessage });

  switch (modalType) {
    case ModalType.SUCCESS:
      return <SuccessModal isOpen={true} onClose={closeModal} />;
    case ModalType.ERROR:
      return <ErrorModal isOpen={true} onClose={closeModal} />;
    case ModalType.CAUTION:
      return <CautionModal isOpen={true} onClose={closeModal} />;
    case ModalType.DELETE:
      return <DeleteModal isOpen={true} onClose={closeModal} />;
    case ModalType.ADD_DELIVERY_ADDRESS:
      return <AddDeliveryAddressModal isOpen={true} onClose={closeModal} />;
    case ModalType.UPDATE_DELIVERY_ADDRESS:
      return <UpdateDeliveryAddressModal isOpen={true} onClose={closeModal} />;
    case ModalType.ADD_RECIPIENT:
      return <AddRecipientModal isOpen={true} onClose={closeModal} />;
    case ModalType.UPDATE_RECIPIENT:
      return <UpdateRecipientModal isOpen={true} onClose={closeModal} />;
    case ModalType.DELETE_RECIPIENT:
      return <DeleteRecipientModal isOpen={true} onClose={closeModal} />;
    case ModalType.ADD_SUBSCRIPTION:
      return <AddSubscriptionModal isOpen={true} onClose={closeModal} />;
    case ModalType.ADD_TO_CART:
      return <AddtoCartModal isOpen={true} onClose={closeModal} />;
    case ModalType.TOP_UP_WALLET:
      return <TopUpeWallet isOpen={true} onClose={closeModal} />;
    case ModalType.ADD_WALLET:
      return <AddNewEwalletModal isOpen={true} onClose={closeModal} />;
    case ModalType.EDIT_WALLET_ALIAS:
      return <EditEwalletAliasModal isOpen={true} onClose={closeModal} />;
    case ModalType.CONFIRM_CHANGES:
      return <ConfirmChangesModal isOpen={true} onClose={closeModal} />;
    case ModalType.CONFIRM_ARCHIVE_WALLET:
      return <ConfirmArchivedWalletModal isOpen={true} onClose={closeModal} />;
    case ModalType.CONFIRM_UNARCHIVE_WALLET:
      return <ConfirmUnArchiveWalletModal isOpen={true} onClose={closeModal} />;
    case ModalType.SET_PREFERRED_WALLET:
      return (
        <ConfirmPreferredAccountModal isOpen={true} onClose={closeModal} />
      );
    case ModalType.ADD_NEW_USER:
      return <AddNewUserModal isOpen={true} onClose={closeModal} />;
    // case ModalType.DELETE_USER:
    //   return <DeleteUserModal isOpen={true} onClose={closeModal} />;
    case ModalType.GENERATE_PAYMENT_HISTORY:
      return <GeneratePaymentModal isOpen={true} onClose={closeModal} />;
    default:
      return null;
  }
};

export default ModalManager;
import React, { createContext, ReactNode, useContext, useState } from "react";

export enum ModalType {
  SUCCESS = "success",
  CAUTION = "caution",
  ERROR = "error",
  WARNING = "warning",
  INFO = "info",
  DELETE = "delete",
  TOP_UP_WALLET = "topWallet",
  SET_PREFERRED_WALLET = "setPreferredWallet",
  ADD_WALLET = "addWallet",
  EDIT_WALLET_ALIAS = "editWalletAlias",
  ADD_NEW_USER = "addNewUser",
  DELETE_USER = "deleteUser",
  ADD_SUBSCRIPTION = "addSubscription",
  ADD_TO_CART = "addToCart",
  CONFIRM_CHANGES = "confirmChanges",
  CONFIRM_ARCHIVE_WALLET = "confirmArchiveWallet",
  CONFIRM_UNARCHIVE_WALLET = "confirmUnArchiveWallet",
  // ARCHIVE_WALLET = "archiveWallet",
  ADD_DELIVERY_ADDRESS = "addDeliveryAddress",
  UPDATE_DELIVERY_ADDRESS = "updateDeliveryAddress",
  ADD_RECIPIENT = "addRecipient",
  UPDATE_RECIPIENT = "updateRecipient",
  DELETE_RECIPIENT = "deleteRecipient",
  GENERATE_PAYMENT_HISTORY = "generatePaymentHistory", // New modal type for generating payment history
}

interface ModalContextType {
  modalType: ModalType | null;
  modalMessage: string | string[] | null;
  modalData: any; // Add modalData to store default values
  openModal: (
    type: ModalType,
    data?: any,
    message?: string | string[] | null
  ) => void;
  closeModal: () => void;
}

const ModalContext = createContext<ModalContextType>({} as ModalContextType);

export const useModal = () => {
  const context = useContext(ModalContext);
  if (!context) {
    throw new Error("useModal must be used within a ModalProvider");
  }
  return context;
};

export const ModalProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [modalType, setModalType] = useState<ModalType | null>(null);
  const [modalData, setModalData] = useState<any>(null);
  const [modalMessage, setModalMessage] = useState<string | string[] | null>(
    null
  );

  const openModal = (
    type: ModalType,
    data?: any,
    message?: string | string[] | null
  ) => {
    console.log(
      `openModal called with type:${type}, data${data} and message:${message}`
    );
    setModalType(type);
    setModalData(data);
    setModalMessage(message || null);

    setTimeout(() => {
      console.log("Updated Modal State: ", {
        modalType: type,
        modalData: data,
        modalMessage: message,
      });
    }, 0);
  };

  const closeModal = () => {
    setModalType(null);
    setModalData(null);
    setModalMessage(null);
  };

  return (
    <ModalContext.Provider
      value={{ modalType, modalData, modalMessage, openModal, closeModal }}
    >
      {children}
    </ModalContext.Provider>
  );
};
