 background-image: url("data:image/svg+xml,%3Csvg width='12' height='12' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='%23ffffff' d='M4.1 9.7L0 5.9l1.4-1.4 2.7 2.6 5-4.9L10.5.9 4.1 7.3z'/%3E%3C/svg%3E");

import { useContext, useState } from "react";
import { useForm } from "react-hook-form";
import logo from "../../../assets/logo.png";
import styles from "./Login.module.css";
import AuthContext from "../../../state-management/contexts/authContext";
import { SecurityFormValues } from "../eservsidebar/toolssidebar/settings/security/PasswordTest";
import { useCheckCredentials } from "../../../hooks/useCheckCredentials";
import Input from "../../textfield/Input";
import ErrorMessage from "../../errormessage/ErrorMessage";
import { useNavigate } from "react-router-dom";
import { useFetchProfileDetails } from "../../../hooks/useProfile";

const Login = () => {
  const [isCloseVisible, setCloseVisible] = useState(true);
  const [submissionError, setSubmissionError] = useState<string | null>(null);

  const { dispatch } = useContext(AuthContext);
  const navigate = useNavigate();

  const { checkCredentials, isLoading, error } = useCheckCredentials();
  const { data: profile } = useFetchProfileDetails();

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<SecurityFormValues>({});

  // Add logic to handle button click and toggle visibility
  const handleButtonClick = () => {
    setCloseVisible(!isCloseVisible);
  };

  const onSubmit = async (data: SecurityFormValues) => {
    setSubmissionError(null);

    const success = await checkCredentials(data.email, data.currentPassword);

    if (success) {
      alert("Logged in successfully!");
      reset();
      dispatch({
        type: "LOGIN",
        username: profile?.firstName,
        subscriberId: profile?.subscriberId,
        emailAddress: data.email,
      });
      navigate("/eservice/Settings/Profile"); //Redirect to E-Service after login
    } else {
      if (error) {
        setSubmissionError(error);
      } else {
        setSubmissionError("Failed to login. Please try again.");
      }
    }
  };
  return (
    <div className={styles["login-background"]}>
      {" "}
      <div className={styles["login-container"]}>
        <div className={styles["login-logo"]}>
          <img src={logo} alt="coj logo" />
        </div>
        <form
          onSubmit={handleSubmit(onSubmit)}
          className={styles["login-section"]}
        >
          <h1> Hello! Welcome back</h1>
          <p>Log in to access your dashboard</p>
          {/* Error Message */}
          {submissionError && (
            <ErrorMessage errorMessage={submissionError} showPrefix />
          )}
          {/* If there's a direct error from the hook (might be the same as submissionError) */}
          {error && !submissionError && (
            <ErrorMessage errorMessage={error} showPrefix />
          )}
          <div className={styles["login-section-input"]}>
            <Input
              id="email"
              type="email"
              placeholder="Email Address"
              register={register("email", {
                required: "Email Address is required.",
              })}
              autoComplete="email"
              ariaDescribedBy="emailError"
            />
            {errors.email && (
              <ErrorMessage
                errorMessage={errors.email.message}
                id="emailError"
              />
            )}
            <Input
              id="currentPassword"
              type="password"
              placeholder="***************"
              register={register("currentPassword", {
                required: "Password is required.",
                minLength: {
                  value: 8,
                  message: "Password must be at least 8 characters long.",
                },
                maxLength: {
                  value: 25,
                  message: "Must not exceed 25 characters.",
                },
              })}
              autoComplete="off"
              ariaDescribedBy="currentPasswordError"
            />
            {errors.currentPassword && (
              <ErrorMessage errorMessage={errors.currentPassword.message} />
            )}{" "}
          </div>{" "}
          <div className={styles["login-options"]}>
            <label>
              <input type="checkbox" className={styles["input-space"]} />
              Remember me
            </label>
            Forgot password?
          </div>
          <button
            //disabled={!isValid}
            type="submit"
            //onClick={handleLogin}
          >
            Login
          </button>
          <p>Donâ€™t have an account? Sign up</p>
        </form>
      </div>{" "}
      {isCloseVisible && (
        <div className={styles["browser-notification"]}>
          <p>
            Please note: Internet Explorer and other outdated browsers are not
            fully supported for browsing this website. For the best experience
            when using our website, please use Firefox or Chrome.
            <button onClick={handleButtonClick}>Close</button>{" "}
          </p>
        </div>
      )}
    </div>
  );
};

export default Login;

.login-logo {
  padding: 2rem;
}
.login-logo img {
  width: 227px;
}
.login-background {
  background-image: url("../../../assets/african.png");
  position: relative;
  height: 100vh;
}
.login-container {
  height: 100vh;
  width: 40%;
  background-color: rgb(255, 255, 255, 0.8);
}
.login-section {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 70px;
}
.login-section h1 {
  color: var(--primary-color);
}

.login-section-input input {
  width: 439px;
  height: 48px;
  margin-top: 30px;
  border-radius: 6px;
  border: 1px solid var(--primary-color);
  color: var(--primary-color);
  padding: 19px;
  background-color: transparent;
}
.login-section button {
  width: 439px;
  height: 64px;
  border-radius: 6px;
  border: none;
  background-color: var(--primary-color);
  cursor: pointer;
  color: white;
  font-size: 28px;
  margin-bottom: 15px;
  cursor: pointer;
}

.login-options {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  padding: 30px;
}
.login-options input {
  margin-right: 10px;
  width: 14px;
  height: 14px;
}
.login-options label {
  margin-right: 205px;
}

.login-button {
  background-color: #ccc;
}
.browser-notification {
  position: fixed;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 60px;
  background-color: rgba(242, 197, 107, 0.8);
  /* background-color: #f2c56b; */
  padding: 5px;
}

.browser-notification p {
  display: flex;
  align-items: center;
  justify-content: center;
  color: #000;
}

.browser-notification button {
  width: 70px;
  height: 40px;
  padding: 5px;
  font-size: 18px;
  background: var(--primary-color);
  color: var(--white);
  margin-left: 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

